/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseFeedCreateResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseFeedResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseFeedUpdateResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseListFeedResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseobject } from '../../src/model';
// @ts-ignore
import { CreateFeedUsingPOSTRequest } from '../../src/model';
/**
 * FeedControllerApi - axios parameter creator
 * @export
 */
export const FeedControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createFeed
         * @param {string} content content
         * @param {Array<string>} [hashtags] hashtags
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedUsingPOST: async (content: string, hashtags?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('createFeedUsingPOST', 'content', content)
            const localVarPath = `/api/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (hashtags) {
                localVarQueryParameter['hashtags'] = hashtags;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeedUsingDELETE: async (feedId: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('deleteFeedUsingDELETE', 'feedId', feedId)
            const localVarPath = `/api/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFeedList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedListUsingGET: async (nickname: string, page: number, pageSize?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('getFeedListUsingGET', 'nickname', nickname)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getFeedListUsingGET', 'page', page)
            const localVarPath = `/api/feeds/list/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOneFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneFeedUsingGET: async (feedId: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getOneFeedUsingGET', 'feedId', feedId)
            const localVarPath = `/api/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateFeed
         * @param {string} content content
         * @param {number} feedId feedId
         * @param {Array<string>} [existingUrlList] existingUrlList
         * @param {Array<string>} [hashtags] hashtags
         * @param {Array<string>} [indexList] indexList
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedUsingPOST: async (content: string, feedId: number, existingUrlList?: Array<string>, hashtags?: Array<string>, indexList?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            assertParamExists('updateFeedUsingPOST', 'content', content)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('updateFeedUsingPOST', 'feedId', feedId)
            const localVarPath = `/api/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (existingUrlList) {
                localVarQueryParameter['existingUrlList'] = existingUrlList;
            }

            if (hashtags) {
                localVarQueryParameter['hashtags'] = hashtags;
            }

            if (indexList) {
                localVarQueryParameter['indexList'] = indexList;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedControllerApi - functional programming interface
 * @export
 */
export const FeedControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createFeed
         * @param {string} content content
         * @param {Array<string>} [hashtags] hashtags
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeedUsingPOST(content: string, hashtags?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseFeedCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeedUsingPOST(content, hashtags, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeedUsingDELETE(feedId: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeedUsingDELETE(feedId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getFeedList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedListUsingGET(nickname, page, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getOneFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneFeedUsingGET(feedId: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneFeedUsingGET(feedId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateFeed
         * @param {string} content content
         * @param {number} feedId feedId
         * @param {Array<string>} [existingUrlList] existingUrlList
         * @param {Array<string>} [hashtags] hashtags
         * @param {Array<string>} [indexList] indexList
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeedUsingPOST(content: string, feedId: number, existingUrlList?: Array<string>, hashtags?: Array<string>, indexList?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseFeedUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeedUsingPOST(content, feedId, existingUrlList, hashtags, indexList, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedControllerApi - factory interface
 * @export
 */
export const FeedControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createFeed
         * @param {string} content content
         * @param {Array<string>} [hashtags] hashtags
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedUsingPOST(content: string, hashtags?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: any): AxiosPromise<ApiSuccessResponseFeedCreateResponse> {
            return localVarFp.createFeedUsingPOST(content, hashtags, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeedUsingDELETE(feedId: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.deleteFeedUsingDELETE(feedId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFeedList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseListFeedResponse> {
            return localVarFp.getFeedListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOneFeed
         * @param {number} feedId feedId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneFeedUsingGET(feedId: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseFeedResponse> {
            return localVarFp.getOneFeedUsingGET(feedId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateFeed
         * @param {string} content content
         * @param {number} feedId feedId
         * @param {Array<string>} [existingUrlList] existingUrlList
         * @param {Array<string>} [hashtags] hashtags
         * @param {Array<string>} [indexList] indexList
         * @param {CreateFeedUsingPOSTRequest} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeedUsingPOST(content: string, feedId: number, existingUrlList?: Array<string>, hashtags?: Array<string>, indexList?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: any): AxiosPromise<ApiSuccessResponseFeedUpdateResponse> {
            return localVarFp.updateFeedUsingPOST(content, feedId, existingUrlList, hashtags, indexList, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedControllerApi - object-oriented interface
 * @export
 * @class FeedControllerApi
 * @extends {BaseAPI}
 */
export class FeedControllerApi extends BaseAPI {
    /**
     * 
     * @summary createFeed
     * @param {string} content content
     * @param {Array<string>} [hashtags] hashtags
     * @param {CreateFeedUsingPOSTRequest} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public createFeedUsingPOST(content: string, hashtags?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).createFeedUsingPOST(content, hashtags, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteFeed
     * @param {number} feedId feedId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public deleteFeedUsingDELETE(feedId: number, userId?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).deleteFeedUsingDELETE(feedId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFeedList
     * @param {string} nickname nickname
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public getFeedListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).getFeedListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOneFeed
     * @param {number} feedId feedId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public getOneFeedUsingGET(feedId: number, userId?: number, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).getOneFeedUsingGET(feedId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateFeed
     * @param {string} content content
     * @param {number} feedId feedId
     * @param {Array<string>} [existingUrlList] existingUrlList
     * @param {Array<string>} [hashtags] hashtags
     * @param {Array<string>} [indexList] indexList
     * @param {CreateFeedUsingPOSTRequest} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedControllerApi
     */
    public updateFeedUsingPOST(content: string, feedId: number, existingUrlList?: Array<string>, hashtags?: Array<string>, indexList?: Array<string>, userId?: CreateFeedUsingPOSTRequest, options?: AxiosRequestConfig) {
        return FeedControllerApiFp(this.configuration).updateFeedUsingPOST(content, feedId, existingUrlList, hashtags, indexList, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
