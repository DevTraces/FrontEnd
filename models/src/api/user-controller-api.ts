/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseobject } from '../../src/model';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary checkEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailUsingGET: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('checkEmailUsingGET', 'email', email)
            const localVarPath = `/api/users/email/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary checkNickname
         * @param {string} nickname nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkNicknameUsingGET: async (nickname: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('checkNicknameUsingGET', 'nickname', nickname)
            const localVarPath = `/api/users/nickname/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getProfileByNickname
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByNicknameUsingGET: async (nickname: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('getProfileByNicknameUsingGET', 'nickname', nickname)
            const localVarPath = `/api/users/profile/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatePassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPATCH: async (userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateProfile
         * @param {string} nickname nickname
         * @param {string} updateDescription updateDescription
         * @param {string} updateNickname updateNickname
         * @param {string} updateUsername updateUsername
         * @param {File} updateProfileImage updateProfileImage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileUsingPOST: async (nickname: string, updateDescription: string, updateNickname: string, updateUsername: string, updateProfileImage: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('updateProfileUsingPOST', 'nickname', nickname)
            // verify required parameter 'updateDescription' is not null or undefined
            assertParamExists('updateProfileUsingPOST', 'updateDescription', updateDescription)
            // verify required parameter 'updateNickname' is not null or undefined
            assertParamExists('updateProfileUsingPOST', 'updateNickname', updateNickname)
            // verify required parameter 'updateUsername' is not null or undefined
            assertParamExists('updateProfileUsingPOST', 'updateUsername', updateUsername)
            // verify required parameter 'updateProfileImage' is not null or undefined
            assertParamExists('updateProfileUsingPOST', 'updateProfileImage', updateProfileImage)
            const localVarPath = `/api/users/profile/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (updateDescription !== undefined) {
                localVarQueryParameter['updateDescription'] = updateDescription;
            }

            if (updateNickname !== undefined) {
                localVarQueryParameter['updateNickname'] = updateNickname;
            }

            if (updateUsername !== undefined) {
                localVarQueryParameter['updateUsername'] = updateUsername;
            }


            if (updateProfileImage !== undefined) { 
                localVarFormParams.append('updateProfileImage', updateProfileImage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary checkEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmailUsingGET(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEmailUsingGET(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary checkNickname
         * @param {string} nickname nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkNicknameUsingGET(nickname: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkNicknameUsingGET(nickname, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getProfileByNickname
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileByNicknameUsingGET(nickname: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileByNicknameUsingGET(nickname, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updatePassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePasswordUsingPATCH(userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePasswordUsingPATCH(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateProfile
         * @param {string} nickname nickname
         * @param {string} updateDescription updateDescription
         * @param {string} updateNickname updateNickname
         * @param {string} updateUsername updateUsername
         * @param {File} updateProfileImage updateProfileImage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileUsingPOST(nickname: string, updateDescription: string, updateNickname: string, updateUsername: string, updateProfileImage: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfileUsingPOST(nickname, updateDescription, updateNickname, updateUsername, updateProfileImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary checkEmail
         * @param {string} email email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailUsingGET(email: string, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.checkEmailUsingGET(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary checkNickname
         * @param {string} nickname nickname
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkNicknameUsingGET(nickname: string, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.checkNicknameUsingGET(nickname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getProfileByNickname
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileByNicknameUsingGET(nickname: string, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.getProfileByNicknameUsingGET(nickname, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatePassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordUsingPATCH(userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.updatePasswordUsingPATCH(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateProfile
         * @param {string} nickname nickname
         * @param {string} updateDescription updateDescription
         * @param {string} updateNickname updateNickname
         * @param {string} updateUsername updateUsername
         * @param {File} updateProfileImage updateProfileImage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileUsingPOST(nickname: string, updateDescription: string, updateNickname: string, updateUsername: string, updateProfileImage: File, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.updateProfileUsingPOST(nickname, updateDescription, updateNickname, updateUsername, updateProfileImage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @summary checkEmail
     * @param {string} email email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public checkEmailUsingGET(email: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).checkEmailUsingGET(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary checkNickname
     * @param {string} nickname nickname
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public checkNicknameUsingGET(nickname: string, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).checkNicknameUsingGET(nickname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getProfileByNickname
     * @param {string} nickname nickname
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getProfileByNicknameUsingGET(nickname: string, userId?: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getProfileByNicknameUsingGET(nickname, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatePassword
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updatePasswordUsingPATCH(userId?: number, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updatePasswordUsingPATCH(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateProfile
     * @param {string} nickname nickname
     * @param {string} updateDescription updateDescription
     * @param {string} updateNickname updateNickname
     * @param {string} updateUsername updateUsername
     * @param {File} updateProfileImage updateProfileImage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateProfileUsingPOST(nickname: string, updateDescription: string, updateNickname: string, updateUsername: string, updateProfileImage: File, options?: AxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateProfileUsingPOST(nickname, updateDescription, updateNickname, updateUsername, updateProfileImage, options).then((request) => request(this.axios, this.basePath));
    }
}
