/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseListFollowResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseobject } from '../../src/model';
/**
 * FollowControllerApi - axios parameter creator
 * @export
 */
export const FollowControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollowRelationUsingPOST: async (nickname: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('createFollowRelationUsingPOST', 'nickname', nickname)
            const localVarPath = `/api/follows/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowRelationUsingDELETE: async (nickname: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('deleteFollowRelationUsingDELETE', 'nickname', nickname)
            const localVarPath = `/api/follows/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFollowerUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerUserListUsingGET: async (nickname: string, page: number, pageSize?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('getFollowerUserListUsingGET', 'nickname', nickname)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getFollowerUserListUsingGET', 'page', page)
            const localVarPath = `/api/follows/follower/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getFollowingUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowingUserListUsingGET: async (nickname: string, page: number, pageSize?: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nickname' is not null or undefined
            assertParamExists('getFollowingUserListUsingGET', 'nickname', nickname)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getFollowingUserListUsingGET', 'page', page)
            const localVarPath = `/api/follows/following/{nickname}`
                .replace(`{${"nickname"}}`, encodeURIComponent(String(nickname)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FollowControllerApi - functional programming interface
 * @export
 */
export const FollowControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FollowControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFollowRelationUsingPOST(nickname: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFollowRelationUsingPOST(nickname, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFollowRelationUsingDELETE(nickname: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFollowRelationUsingDELETE(nickname, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getFollowerUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowerUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListFollowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowerUserListUsingGET(nickname, page, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getFollowingUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowingUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListFollowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowingUserListUsingGET(nickname, page, pageSize, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FollowControllerApi - factory interface
 * @export
 */
export const FollowControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FollowControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollowRelationUsingPOST(nickname: string, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.createFollowRelationUsingPOST(nickname, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteFollowRelation
         * @param {string} nickname nickname
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollowRelationUsingDELETE(nickname: string, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.deleteFollowRelationUsingDELETE(nickname, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFollowerUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowerUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseListFollowResponse> {
            return localVarFp.getFollowerUserListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getFollowingUserList
         * @param {string} nickname nickname
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowingUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseListFollowResponse> {
            return localVarFp.getFollowingUserListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FollowControllerApi - object-oriented interface
 * @export
 * @class FollowControllerApi
 * @extends {BaseAPI}
 */
export class FollowControllerApi extends BaseAPI {
    /**
     * 
     * @summary createFollowRelation
     * @param {string} nickname nickname
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowControllerApi
     */
    public createFollowRelationUsingPOST(nickname: string, userId?: number, options?: AxiosRequestConfig) {
        return FollowControllerApiFp(this.configuration).createFollowRelationUsingPOST(nickname, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteFollowRelation
     * @param {string} nickname nickname
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowControllerApi
     */
    public deleteFollowRelationUsingDELETE(nickname: string, userId?: number, options?: AxiosRequestConfig) {
        return FollowControllerApiFp(this.configuration).deleteFollowRelationUsingDELETE(nickname, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFollowerUserList
     * @param {string} nickname nickname
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowControllerApi
     */
    public getFollowerUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig) {
        return FollowControllerApiFp(this.configuration).getFollowerUserListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getFollowingUserList
     * @param {string} nickname nickname
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowControllerApi
     */
    public getFollowingUserListUsingGET(nickname: string, page: number, pageSize?: number, userId?: number, options?: AxiosRequestConfig) {
        return FollowControllerApiFp(this.configuration).getFollowingUserListUsingGET(nickname, page, pageSize, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
