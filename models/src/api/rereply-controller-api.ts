/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseListRereplyResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseRereplyResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseobject } from '../../src/model';
/**
 * RereplyControllerApi - axios parameter creator
 * @export
 */
export const RereplyControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createRereply
         * @param {number} feedId feedId
         * @param {number} replyId replyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRereplyUsingPOST: async (feedId: number, replyId: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('createRereplyUsingPOST', 'feedId', feedId)
            // verify required parameter 'replyId' is not null or undefined
            assertParamExists('createRereplyUsingPOST', 'replyId', replyId)
            const localVarPath = `/api/feeds/{feedId}/replies/{replyId}/rereplies`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"replyId"}}`, encodeURIComponent(String(replyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteRereply
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRereplyUsingDELETE: async (rereplyId: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rereplyId' is not null or undefined
            assertParamExists('deleteRereplyUsingDELETE', 'rereplyId', rereplyId)
            const localVarPath = `/api/feeds/{feedId}/replies/{replyId}/rereplies/{rereplyId}`
                .replace(`{${"rereplyId"}}`, encodeURIComponent(String(rereplyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getRereplyList
         * @param {number} feedId feedId
         * @param {number} page page
         * @param {number} replyId replyId
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRereplyListUsingGET: async (feedId: number, page: number, replyId: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getRereplyListUsingGET', 'feedId', feedId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getRereplyListUsingGET', 'page', page)
            // verify required parameter 'replyId' is not null or undefined
            assertParamExists('getRereplyListUsingGET', 'replyId', replyId)
            const localVarPath = `/api/feeds/{feedId}/replies/{replyId}/rereplies`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"replyId"}}`, encodeURIComponent(String(replyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateRereply
         * @param {number} feedId feedId
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRereplyUsingPUT: async (feedId: number, rereplyId: number, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('updateRereplyUsingPUT', 'feedId', feedId)
            // verify required parameter 'rereplyId' is not null or undefined
            assertParamExists('updateRereplyUsingPUT', 'rereplyId', rereplyId)
            const localVarPath = `/api/feeds/{feedId}/replies/{replyId}/rereplies/{rereplyId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"rereplyId"}}`, encodeURIComponent(String(rereplyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RereplyControllerApi - functional programming interface
 * @export
 */
export const RereplyControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RereplyControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary createRereply
         * @param {number} feedId feedId
         * @param {number} replyId replyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRereplyUsingPOST(feedId: number, replyId: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseRereplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRereplyUsingPOST(feedId, replyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary deleteRereply
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRereplyUsingDELETE(rereplyId: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRereplyUsingDELETE(rereplyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getRereplyList
         * @param {number} feedId feedId
         * @param {number} page page
         * @param {number} replyId replyId
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRereplyListUsingGET(feedId: number, page: number, replyId: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListRereplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRereplyListUsingGET(feedId, page, replyId, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary updateRereply
         * @param {number} feedId feedId
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRereplyUsingPUT(feedId: number, rereplyId: number, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseRereplyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRereplyUsingPUT(feedId, rereplyId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RereplyControllerApi - factory interface
 * @export
 */
export const RereplyControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RereplyControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary createRereply
         * @param {number} feedId feedId
         * @param {number} replyId replyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRereplyUsingPOST(feedId: number, replyId: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseRereplyResponse> {
            return localVarFp.createRereplyUsingPOST(feedId, replyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteRereply
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRereplyUsingDELETE(rereplyId: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.deleteRereplyUsingDELETE(rereplyId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getRereplyList
         * @param {number} feedId feedId
         * @param {number} page page
         * @param {number} replyId replyId
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRereplyListUsingGET(feedId: number, page: number, replyId: number, pageSize?: number, options?: any): AxiosPromise<ApiSuccessResponseListRereplyResponse> {
            return localVarFp.getRereplyListUsingGET(feedId, page, replyId, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateRereply
         * @param {number} feedId feedId
         * @param {number} rereplyId rereplyId
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRereplyUsingPUT(feedId: number, rereplyId: number, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseRereplyResponse> {
            return localVarFp.updateRereplyUsingPUT(feedId, rereplyId, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RereplyControllerApi - object-oriented interface
 * @export
 * @class RereplyControllerApi
 * @extends {BaseAPI}
 */
export class RereplyControllerApi extends BaseAPI {
    /**
     * 
     * @summary createRereply
     * @param {number} feedId feedId
     * @param {number} replyId replyId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RereplyControllerApi
     */
    public createRereplyUsingPOST(feedId: number, replyId: number, userId?: number, options?: AxiosRequestConfig) {
        return RereplyControllerApiFp(this.configuration).createRereplyUsingPOST(feedId, replyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteRereply
     * @param {number} rereplyId rereplyId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RereplyControllerApi
     */
    public deleteRereplyUsingDELETE(rereplyId: number, userId?: number, options?: AxiosRequestConfig) {
        return RereplyControllerApiFp(this.configuration).deleteRereplyUsingDELETE(rereplyId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getRereplyList
     * @param {number} feedId feedId
     * @param {number} page page
     * @param {number} replyId replyId
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RereplyControllerApi
     */
    public getRereplyListUsingGET(feedId: number, page: number, replyId: number, pageSize?: number, options?: AxiosRequestConfig) {
        return RereplyControllerApiFp(this.configuration).getRereplyListUsingGET(feedId, page, replyId, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateRereply
     * @param {number} feedId feedId
     * @param {number} rereplyId rereplyId
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RereplyControllerApi
     */
    public updateRereplyUsingPUT(feedId: number, rereplyId: number, userId?: number, options?: AxiosRequestConfig) {
        return RereplyControllerApiFp(this.configuration).updateRereplyUsingPUT(feedId, rereplyId, userId, options).then((request) => request(this.axios, this.basePath));
    }
}
