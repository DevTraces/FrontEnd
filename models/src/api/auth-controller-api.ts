/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseMailAuthKeyCheckResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponsePasswordCheckResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseUserRegistrationResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseobject } from '../../src/model';
// @ts-ignore
import { MailAuthKeyCheckRequest } from '../../src/model';
// @ts-ignore
import { MailAuthKeyRequest } from '../../src/model';
// @ts-ignore
import { SignInRequest } from '../../src/model';
/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary checkAuthKey
         * @param {MailAuthKeyCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAuthKeyUsingPOST: async (request: MailAuthKeyCheckRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('checkAuthKeyUsingPOST', 'request', request)
            const localVarPath = `/api/auth/email/auth-key/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary checkPassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPasswordUsingPOST: async (userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/password/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary sendMailWithAuthKey
         * @param {MailAuthKeyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailWithAuthKeyUsingPOST: async (request: MailAuthKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('sendMailWithAuthKeyUsingPOST', 'request', request)
            const localVarPath = `/api/auth/email/auth-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signIn
         * @param {SignInRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingPOST: async (request: SignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('signInUsingPOST', 'request', request)
            const localVarPath = `/api/auth/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signOut
         * @param {string} authorization authorization
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutUsingPOST: async (authorization: string, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('signOutUsingPOST', 'authorization', authorization)
            const localVarPath = `/api/auth/sign-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userId, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary signUp
         * @param {string} [description] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {any} [profileImage] 
         * @param {string} [profileImageLink] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpUsingPOST: async (description?: string, email?: string, nickname?: string, password?: string, profileImage?: any, profileImageLink?: string, username?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (nickname !== undefined) {
                localVarQueryParameter['nickname'] = nickname;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (profileImage !== undefined) {
                localVarQueryParameter['profileImage'] = profileImage;
            }

            if (profileImageLink !== undefined) {
                localVarQueryParameter['profileImageLink'] = profileImageLink;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary checkAuthKey
         * @param {MailAuthKeyCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAuthKeyUsingPOST(request: MailAuthKeyCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseMailAuthKeyCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAuthKeyUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary checkPassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPasswordUsingPOST(userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponsePasswordCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPasswordUsingPOST(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary sendMailWithAuthKey
         * @param {MailAuthKeyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMailWithAuthKeyUsingPOST(request: MailAuthKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMailWithAuthKeyUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signIn
         * @param {SignInRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInUsingPOST(request: SignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInUsingPOST(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signOut
         * @param {string} authorization authorization
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signOutUsingPOST(authorization: string, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseobject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signOutUsingPOST(authorization, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary signUp
         * @param {string} [description] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {any} [profileImage] 
         * @param {string} [profileImageLink] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpUsingPOST(description?: string, email?: string, nickname?: string, password?: string, profileImage?: any, profileImageLink?: string, username?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseUserRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpUsingPOST(description, email, nickname, password, profileImage, profileImageLink, username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary checkAuthKey
         * @param {MailAuthKeyCheckRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAuthKeyUsingPOST(request: MailAuthKeyCheckRequest, options?: any): AxiosPromise<ApiSuccessResponseMailAuthKeyCheckResponse> {
            return localVarFp.checkAuthKeyUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary checkPassword
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPasswordUsingPOST(userId?: number, options?: any): AxiosPromise<ApiSuccessResponsePasswordCheckResponse> {
            return localVarFp.checkPasswordUsingPOST(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary sendMailWithAuthKey
         * @param {MailAuthKeyRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMailWithAuthKeyUsingPOST(request: MailAuthKeyRequest, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.sendMailWithAuthKeyUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signIn
         * @param {SignInRequest} request request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInUsingPOST(request: SignInRequest, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.signInUsingPOST(request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signOut
         * @param {string} authorization authorization
         * @param {number} [userId] userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signOutUsingPOST(authorization: string, userId?: number, options?: any): AxiosPromise<ApiSuccessResponseobject> {
            return localVarFp.signOutUsingPOST(authorization, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary signUp
         * @param {string} [description] 
         * @param {string} [email] 
         * @param {string} [nickname] 
         * @param {string} [password] 
         * @param {any} [profileImage] 
         * @param {string} [profileImageLink] 
         * @param {string} [username] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpUsingPOST(description?: string, email?: string, nickname?: string, password?: string, profileImage?: any, profileImageLink?: string, username?: string, options?: any): AxiosPromise<ApiSuccessResponseUserRegistrationResponse> {
            return localVarFp.signUpUsingPOST(description, email, nickname, password, profileImage, profileImageLink, username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary checkAuthKey
     * @param {MailAuthKeyCheckRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public checkAuthKeyUsingPOST(request: MailAuthKeyCheckRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).checkAuthKeyUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary checkPassword
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public checkPasswordUsingPOST(userId?: number, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).checkPasswordUsingPOST(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary sendMailWithAuthKey
     * @param {MailAuthKeyRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public sendMailWithAuthKeyUsingPOST(request: MailAuthKeyRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).sendMailWithAuthKeyUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signIn
     * @param {SignInRequest} request request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signInUsingPOST(request: SignInRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signInUsingPOST(request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signOut
     * @param {string} authorization authorization
     * @param {number} [userId] userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signOutUsingPOST(authorization: string, userId?: number, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signOutUsingPOST(authorization, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary signUp
     * @param {string} [description] 
     * @param {string} [email] 
     * @param {string} [nickname] 
     * @param {string} [password] 
     * @param {any} [profileImage] 
     * @param {string} [profileImageLink] 
     * @param {string} [username] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public signUpUsingPOST(description?: string, email?: string, nickname?: string, password?: string, profileImage?: any, profileImageLink?: string, username?: string, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).signUpUsingPOST(description, email, nickname, password, profileImage, profileImageLink, username, options).then((request) => request(this.axios, this.basePath));
    }
}
