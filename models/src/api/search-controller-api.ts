/* tslint:disable */
/* eslint-disable */
/**
 * 개발자취 - ArtBubble
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../../base';
// @ts-ignore
import { ApiSuccessResponseGetHashtagsSearchResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseListGetNicknameSearchResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseListGetUsernameSearchResponse } from '../../src/model';
// @ts-ignore
import { ApiSuccessResponseListstring } from '../../src/model';
/**
 * SearchControllerApi - axios parameter creator
 * @export
 */
export const SearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAutoCompleteWords
         * @param {string} keyword keyword
         * @param {number} [numberOfWords] numberOfWords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoCompleteWordsUsingGET: async (keyword: string, numberOfWords?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('getAutoCompleteWordsUsingGET', 'keyword', keyword)
            const localVarPath = `/api/search/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (numberOfWords !== undefined) {
                localVarQueryParameter['numberOfWords'] = numberOfWords;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSearchResultUsingHashtags
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingHashtagsUsingGET: async (keyword: string, page: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('getSearchResultUsingHashtagsUsingGET', 'keyword', keyword)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSearchResultUsingHashtagsUsingGET', 'page', page)
            const localVarPath = `/api/search/hashtags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSearchResultUsingNickname
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingNicknameUsingGET: async (keyword: string, page: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('getSearchResultUsingNicknameUsingGET', 'keyword', keyword)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSearchResultUsingNicknameUsingGET', 'page', page)
            const localVarPath = `/api/search/nickname`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getSearchResultUsingUsername
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingUsernameUsingGET: async (keyword: string, page: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('getSearchResultUsingUsernameUsingGET', 'keyword', keyword)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getSearchResultUsingUsernameUsingGET', 'page', page)
            const localVarPath = `/api/search/username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchControllerApi - functional programming interface
 * @export
 */
export const SearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary getAutoCompleteWords
         * @param {string} keyword keyword
         * @param {number} [numberOfWords] numberOfWords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAutoCompleteWordsUsingGET(keyword: string, numberOfWords?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListstring>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAutoCompleteWordsUsingGET(keyword, numberOfWords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSearchResultUsingHashtags
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchResultUsingHashtagsUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseGetHashtagsSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResultUsingHashtagsUsingGET(keyword, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSearchResultUsingNickname
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchResultUsingNicknameUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListGetNicknameSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResultUsingNicknameUsingGET(keyword, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary getSearchResultUsingUsername
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchResultUsingUsernameUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSuccessResponseListGetUsernameSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResultUsingUsernameUsingGET(keyword, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchControllerApi - factory interface
 * @export
 */
export const SearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary getAutoCompleteWords
         * @param {string} keyword keyword
         * @param {number} [numberOfWords] numberOfWords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutoCompleteWordsUsingGET(keyword: string, numberOfWords?: number, options?: any): AxiosPromise<ApiSuccessResponseListstring> {
            return localVarFp.getAutoCompleteWordsUsingGET(keyword, numberOfWords, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSearchResultUsingHashtags
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingHashtagsUsingGET(keyword: string, page: number, pageSize?: number, options?: any): AxiosPromise<ApiSuccessResponseGetHashtagsSearchResponse> {
            return localVarFp.getSearchResultUsingHashtagsUsingGET(keyword, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSearchResultUsingNickname
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingNicknameUsingGET(keyword: string, page: number, pageSize?: number, options?: any): AxiosPromise<ApiSuccessResponseListGetNicknameSearchResponse> {
            return localVarFp.getSearchResultUsingNicknameUsingGET(keyword, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getSearchResultUsingUsername
         * @param {string} keyword keyword
         * @param {number} page page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResultUsingUsernameUsingGET(keyword: string, page: number, pageSize?: number, options?: any): AxiosPromise<ApiSuccessResponseListGetUsernameSearchResponse> {
            return localVarFp.getSearchResultUsingUsernameUsingGET(keyword, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchControllerApi - object-oriented interface
 * @export
 * @class SearchControllerApi
 * @extends {BaseAPI}
 */
export class SearchControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAutoCompleteWords
     * @param {string} keyword keyword
     * @param {number} [numberOfWords] numberOfWords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public getAutoCompleteWordsUsingGET(keyword: string, numberOfWords?: number, options?: AxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).getAutoCompleteWordsUsingGET(keyword, numberOfWords, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSearchResultUsingHashtags
     * @param {string} keyword keyword
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public getSearchResultUsingHashtagsUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).getSearchResultUsingHashtagsUsingGET(keyword, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSearchResultUsingNickname
     * @param {string} keyword keyword
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public getSearchResultUsingNicknameUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).getSearchResultUsingNicknameUsingGET(keyword, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getSearchResultUsingUsername
     * @param {string} keyword keyword
     * @param {number} page page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchControllerApi
     */
    public getSearchResultUsingUsernameUsingGET(keyword: string, page: number, pageSize?: number, options?: AxiosRequestConfig) {
        return SearchControllerApiFp(this.configuration).getSearchResultUsingUsernameUsingGET(keyword, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}
